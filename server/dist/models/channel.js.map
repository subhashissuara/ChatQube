{"version":3,"sources":["../../src/models/channel.js"],"names":["Channel","app","channels","OrderedMap","query","Promise","resolve","reject","db","collection","aggregate","toArray","err","results","project","options","find","id","_","toString","channelFromCache","get","findById","then","channel","set","catch","findOne","_id","ObjectId","result","obj","idObject","members","each","value","key","memberObjectId","push","userIdObject","userId","title","lastMessage","created","Date","insertOne","info","channelId"],"mappings":"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","file":"channel.js","sourcesContent":["import _, { result } from 'lodash';\r\nimport {toString} from '../helper';\r\nimport { ObjectId } from 'mongodb';\r\nimport { OrderedMap } from 'immutable';\r\n\r\nclass Channel{\r\n    constructor(app){\r\n        this.app = app;\r\n        this.channels = new OrderedMap();\r\n    }\r\n\r\n    aggregate(query){\r\n        return new Promise((resolve, reject) => {\r\n            this.app.db.collection('channels').aggregate(query).toArray((err, results) => {\r\n                return err ? reject(err) : resolve(results);\r\n            });\r\n        });\r\n    }\r\n\r\n    find(query, project = null, options = null){\r\n        return new Promise((resolve, reject) => {\r\n            this.app.db.collection('channels').find(query, options).project(project).toArray((err, results) => {\r\n                return err ? reject(err) : resolve(results);\r\n            })\r\n        });\r\n    }\r\n\r\n    load(id){\r\n        return new Promise((resolve, reject) => {\r\n            id = _.toString(id);\r\n        \r\n            // Find in cache\r\n            const channelFromCache = this.channels.get(id);\r\n            if(channelFromCache){\r\n                    return resolve(channelFromCache);\r\n            }\r\n\r\n            // Otherwise find in DB\r\n            this.findById(id).then((channel) => {\r\n                this.channels = this.channels.set(id, channel);\r\n                return resolve(channel);\r\n            }).catch((err) => {\r\n                return reject(err);\r\n            })\r\n        })\r\n        \r\n    }\r\n\r\n    findById(id){\r\n        return new Promise((resolve, reject) => {\r\n            this.app.db.collection('channels').findOne({_id: new ObjectId(id)}, (err, result) => {\r\n                if(err || !result){\r\n                    return reject(err ? err : \"ID Not Found!\");\r\n                }\r\n                return resolve(result);\r\n            });\r\n        })\r\n    }\r\n\r\n    create(obj){\r\n        return new Promise((resolve, reject) => {\r\n            let id = toString(_.get(obj, '_id'));\r\n            let idObject = id ? new ObjectId(id) : new ObjectId();\r\n\r\n            let members = [];\r\n            _.each(_.get(obj, 'members', []), (value, key) => {\r\n                const memberObjectId = new ObjectId(key);\r\n                members.push(memberObjectId);\r\n            });\r\n\r\n            let userIdObject = null;\r\n            let userId = _.get(obj, 'userId', null);\r\n            if(userId){\r\n                userIdObject = new ObjectId(userId);\r\n            }\r\n\r\n            const channel = {\r\n                _id: idObject,\r\n                title: _.get(obj, 'title', ''),\r\n                lastMessage: _.get(obj, 'lastMessage', ''),\r\n                created: new Date(),\r\n                userId: userIdObject,\r\n                members: members,\r\n            } \r\n\r\n            this.app.db.collection('channels').insertOne(channel, (err, info) => {\r\n                if(!err){\r\n                    const channelId = channel._id.toString();\r\n                    this.channels = this.channels.set(channelId, channel);\r\n                }\r\n                return err ? reject(err) : resolve(channel);\r\n            });\r\n        });\r\n        \r\n    }\r\n}\r\n\r\nexport default Channel;"]}