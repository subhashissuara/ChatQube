{"version":3,"sources":["../../src/models/connection.js"],"names":["Connection","app","connections","modelDidLoad","msg","messageObject","JSON","parse","error","console","log","userId","obj","query","$match","members","$all","ObjectID","$lookup","from","localField","foreignField","as","$unwind","path","$eq","$group","_id","users","db","collection","aggregate","toArray","err","results","_","each","result","uid","toString","get","push","memberConnections","filter","conn","includes","size","forEach","connection","key","ws","send","message","stringify","socketId","action","payload","userConnection","isAuthenticated","models","create","then","channelId","channel","load","memberIds","memberId","memberConnection","c","catch","create_message_error","channelObject","$in","queryOptions","name","created","user","find","id","userTokenId","connectionAuth","token","loadUserByTokenId","set","userIdString","sendToMembers","updateUserStatus","wsServer","on","clientConnection","decodeMessage","doTheJob","closeConnection","remove","userConnections"],"mappings":"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","file":"connection.js","sourcesContent":["import {OrderedMap} from 'immutable';\r\nimport { ObjectID } from 'mongodb';\r\nimport _ from 'lodash';\r\n\r\nclass Connection{\r\n    constructor(app){\r\n        this.app = app;\r\n        this.connections = OrderedMap();\r\n        this.modelDidLoad();\r\n    }\r\n\r\n    decodeMessage(msg){\r\n        let messageObject = null\r\n        try {\r\n            messageObject = JSON.parse(msg);\r\n        } catch (error) {\r\n            console.log(\"Error in decoding message: \", msg)\r\n        }\r\n        return messageObject;\r\n    }\r\n\r\n    sendToMembers(userId, obj){\r\n        \r\n        const query = [\r\n            {\r\n                $match: {\r\n                    members: {$all: [new ObjectID(userId)]}\r\n                }\r\n            },\r\n            {\r\n                $lookup: {\r\n                    from: 'users',\r\n                    localField: 'members',\r\n                    foreignField: '_id',\r\n                    as: 'users'\r\n                }\r\n            },\r\n            {\r\n                $unwind: {\r\n                    path: '$users'\r\n                }\r\n            },\r\n            {\r\n                $match: {\r\n                    'users.online': {\r\n                        $eq: true\r\n                    }\r\n                }\r\n            },\r\n            {\r\n                $group: {\r\n                    _id: \"$users._id\"\r\n                }\r\n            }\r\n        ];\r\n\r\n        const users = [];\r\n\r\n        this.app.db.collection('channels').aggregate(query).toArray((err, results) => {\r\n            if (err === null && results){\r\n                _.each(results, (result) => {\r\n                    const uid = _.toString(_.get(result, '_id'));\r\n                    \r\n                    if(uid){\r\n                        users.push(uid);\r\n                    }\r\n                });\r\n\r\n                // All connections of current user\r\n                const memberConnections = this.connections.filter((conn) => _.includes(users, _.toString(_.get(conn, 'userId'))));\r\n\r\n                if(memberConnections.size){\r\n                    memberConnections.forEach((connection, key) => {\r\n                        const ws = connection.ws;\r\n                        this.send(ws, obj);\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    \r\n    sendAll(obj){\r\n        // Send socket message to all clients\r\n        this.connections.forEach((conn, key) => {\r\n            const ws = conn.ws;\r\n            this.send(ws, obj);\r\n        })\r\n    }\r\n\r\n    send(ws, obj){\r\n        const message = JSON.stringify(obj);\r\n        ws.send(message);\r\n    }\r\n\r\n    doTheJob(socketId, msg){\r\n        const action = _.get(msg, 'action');\r\n        const payload = _.get(msg, 'payload');\r\n        const userConnection = this.connections.get(socketId);\r\n\r\n        switch (action) {\r\n            case 'create_message':\r\n                if(userConnection.isAuthenticated){\r\n                    let messageObject = payload;\r\n                    messageObject.userId = _.get(userConnection, 'userId');\r\n                    this.app.models.message.create(messageObject).then((message) => {\r\n                        const channelId = _.toString(_.get(message, 'channelId'));\r\n                        \r\n                        this.app.models.channel.load(channelId).then((channel) => {\r\n                            const memberIds = _.get(channel, 'members', []);\r\n                            _.each(memberIds, (memberId) => {\r\n                                memberId = _.toString(memberId);\r\n                                const memberConnection = this.connections.filter((c) => _.toString(c.userId) === memberId);\r\n                                memberConnection.forEach((connection) => {\r\n                                    const ws = connection.ws;\r\n                                    this.send(ws, {\r\n                                        action: 'message_added',\r\n                                        payload: message,\r\n                                    })\r\n                                })\r\n                            })\r\n                        })\r\n\r\n                        // Message created Succesfully\r\n                    }).catch((err) => {\r\n                        // Send back to message owner\r\n                        const ws = userConnection.ws;\r\n                        this.send(ws, {\r\n                            action: create_message_error,\r\n                            payload: payload,\r\n                        });\r\n                    });\r\n                }\r\n                break;\r\n            case 'create_channel':\r\n                let channel = payload;\r\n                \r\n                const userId = userConnection.userId; // Not directly using from channel object because someone can fake it\r\n                channel.userId = userId;\r\n                this.app.models.channel.create(channel).then((channelObject) => {\r\n                    // Successfully created channel\r\n                    // Add and send message to all users in new channel\r\n                    let memberConnections = [];\r\n\r\n                    const memberIds = _.get(channelObject, 'members', []);\r\n\r\n                    // Fetch all users from memberIds\r\n                    const query = {\r\n                        _id: {$in: memberIds}\r\n                    };\r\n                    const queryOptions = {\r\n                        _id: 1,\r\n                        name: 1,\r\n                        created: 1,\r\n                    }\r\n                    this.app.models.user.find(query, queryOptions).then((users) => {\r\n                        channelObject.users = users;\r\n                        _.each(memberIds, (id) => {\r\n                            const userId = id.toString();\r\n                            const memberConnection = this.connections.filter((conn) => `${conn.userId}` === userId);\r\n                            \r\n                            if(memberConnection.size){\r\n                                memberConnection.forEach((conn) => {\r\n                                    const ws = conn.ws;\r\n                                    const obj = {\r\n                                        action: 'channel_added',\r\n                                        payload: channelObject,\r\n                                    }\r\n    \r\n                                    // Send to ws client with matching userID from channel members\r\n                                    this.send(ws, obj);\r\n                                });\r\n                            }\r\n                        });\r\n                        });\r\n                    });\r\n                break;\r\n\r\n            case 'auth':\r\n                const userTokenId = payload;\r\n                const connectionAuth = this.connections.get(socketId);\r\n\r\n                if(connectionAuth){\r\n                    // Finding user using token ID and verifying\r\n                    this.app.models.token.loadUserByTokenId(userTokenId).then((token) => {\r\n                        const userId = token.userId;\r\n                        connectionAuth.isAuthenticated = true;\r\n                        connectionAuth.userId = `${userId}`;\r\n\r\n                        this.connections = this.connections.set(socketId, connectionAuth);\r\n\r\n                        // Tell client that it is verified\r\n                        const obj = {\r\n                            action: 'auth_success',\r\n                            payload: \"You are verified!\",\r\n                        };\r\n                        this.send(connectionAuth.ws, obj);\r\n\r\n                        const userIdString = _.toString(userId);\r\n                        // Send all ws connections\r\n                        this.sendToMembers(userIdString, {\r\n                            action: 'user_online',\r\n                            payload: userIdString,\r\n                        });\r\n\r\n                        /*this.sendAll({\r\n                            action: 'user_online',\r\n                            payload: userIdString,\r\n                        });*/\r\n\r\n                        this.app.models.user.updateUserStatus(userIdString, true);\r\n\r\n                    }).catch((err) => {\r\n                        const obj = {\r\n                            action: 'auth_error',\r\n                            payload: \"Authentication Error! Your current token ID: \" + userTokenId,\r\n                        };\r\n                        this.send(connectionAuth.ws, obj);\r\n                    })\r\n                }\r\n                break;\r\n        \r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    modelDidLoad(){\r\n        this.app.wsServer.on('connection', (ws) => {\r\n            const socketId = new ObjectID().toString();\r\n            const clientConnection = {\r\n                _id: `${socketId}`,\r\n                ws: ws,\r\n                userId: null,\r\n                isAuthenticated: false,\r\n            }\r\n\r\n            // Save connections to cache\r\n            this.connections = this.connections.set(socketId, clientConnection);\r\n            \r\n            // Listen all messages from websocket clients\r\n            ws.on('message', (msg) => {\r\n                const message = this.decodeMessage(msg);\r\n                this.doTheJob(socketId, message);\r\n            })\r\n            ws.on('close', () => {\r\n                const closeConnection = this.connections.get(socketId);\r\n                const userId = _.toString(_.get(closeConnection, 'userId', null));\r\n                // Remove socket of client from connections\r\n                this.connections = this.connections.remove(socketId);\r\n\r\n                if(userId){\r\n                    // Find all ws clients with matching userId\r\n                    const userConnections = this.connections.filter((conn) => _.toString(_.get(conn, 'userId')) === userId)\r\n                    \r\n                    if(userConnections.size == 0){\r\n                        // This userId ws client is offline\r\n                        this.sendToMembers(userId, {\r\n                            action: 'user_offline',\r\n                            payload: userId,\r\n                        });\r\n\r\n                        /*this.sendAll({\r\n                            action: 'user_offline',\r\n                            payload: userId,\r\n                        });*/\r\n\r\n                        // Update user status to DB\r\n\r\n                        this.app.models.user.updateUserStatus(userId, false);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport default Connection;"]}