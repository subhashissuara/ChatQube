{"version":3,"sources":["../../src/models/user.js"],"names":["saltRounds","User","app","users","OrderedMap","userId","isOnline","Promise","resolve","reject","update","user","online","query","_id","ObjectId","$set","db","collection","updateMany","err","info","project","options","find","toArray","q","regex","RegExp","$or","name","$regex","email","projection","created","results","length","message","_","get","password","findUserByEmail","result","hashPassword","isPassword","bcrypt","compareSync","models","token","create","then","catch","callback","findOne","id","userInCache","findUserById","set","errors","fields","validations","errorMessage","do","forEach","field","fieldValidation","isValid","errMsg","push","join","toLower","trim","hashSync","userFormatted","Date","beforeSave","insertOne","toString"],"mappings":"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","file":"user.js","sourcesContent":["import _ from 'lodash';\r\nimport {isEmail} from '../helper';\r\nimport bcrypt from 'bcrypt';\r\nimport {ObjectId} from 'mongodb';\r\nimport {OrderedMap} from 'immutable';\r\n\r\nconst saltRounds = 10;\r\n\r\nclass User {\r\n    constructor(app){\r\n        this.app = app;\r\n        this.users = new OrderedMap;\r\n    }\r\n\r\n    updateUserStatus(userId, isOnline = false){\r\n        return new Promise((resolve, reject) => {\r\n            // Update status of user in cache this.users\r\n            this.users = this.users.update(userId, (user) => {\r\n                if(user) {\r\n                    user.online = isOnline;\r\n                }\r\n                \r\n                return user;\r\n            })\r\n\r\n            const query = {\r\n                _id: new ObjectId(userId),\r\n            };\r\n\r\n            const update = {\r\n                $set: {online: isOnline},\r\n            };\r\n            \r\n            this.app.db.collection('users').updateMany(query, update, (err, info) => {\r\n                return err ? reject(err) : resolve(info);\r\n            });\r\n        })\r\n    }\r\n\r\n    find(query = {}, project = {}, options = {}){\r\n        return new Promise((resolve, reject) => {\r\n            this.app.db.collection('users').find(query, options).project(project).toArray((err, users) => {\r\n                return err ? reject(err) : resolve(users);\r\n            })\r\n        })\r\n    }\r\n\r\n    search(q = \"\"){\r\n        return new Promise((resolve, reject) => {\r\n            const regex = new RegExp(q, 'i');\r\n            const query = {\r\n                $or: [\r\n                    {name: {$regex: regex}},\r\n                    {email: {$regex: regex}}\r\n                ],\r\n            };\r\n            this.app.db.collection('users').find(query, {\r\n                projection: \r\n                {\r\n                    _id: true, \r\n                    name: true, \r\n                    created: true, \r\n                }\r\n            }).toArray((err, results) => {\r\n                if(err || !results || !results.length){\r\n                    return reject({message: \"User Not Found!\"})\r\n                }\r\n                return resolve(results);\r\n            });\r\n        });\r\n    }\r\n\r\n    login(user){\r\n        const email = _.get(user, 'email', '');\r\n        const password = _.get(user, 'password', '');\r\n\r\n        return new Promise((resolve, reject) => {\r\n            if(!password || !email || !isEmail(email)){\r\n                return reject({message: \"Login Error Occurred.\"})\r\n            }\r\n            this.findUserByEmail(email, (err, result) => {\r\n                if(err){\r\n                    return reject({message: \"Login Error.\"})\r\n                }\r\n\r\n                // User Found & Compare Password\r\n                const hashPassword = _.get(result, 'password');\r\n                const isPassword = bcrypt.compareSync(password, hashPassword);\r\n\r\n                if(!isPassword){\r\n                    return reject({message: \"Login Error.\"})\r\n                }\r\n\r\n                // Token for User after password match\r\n                const userId = result._id;\r\n                this.app.models.token.create(userId).then((token) => {\r\n                    token.user = result;\r\n                    return resolve(token);\r\n                }).catch(err => {\r\n                    return reject({message: \"Login Error.\"});\r\n                });\r\n            });\r\n        })\r\n    }\r\n\r\n    findUserByEmail(email, callback = () => {}){\r\n        this.app.db.collection('users').findOne({email: email}, (err, result) => {\r\n            if(err || !result){\r\n                return callback({message: \"User Not Found!\"});\r\n            }\r\n            return callback(null, result);\r\n        })\r\n    }\r\n    load(id){\r\n        return new Promise((resolve, reject) => {\r\n            // Search in cache to avoid db query\r\n            const userInCache = this.users.get(id);\r\n            if(userInCache){\r\n                return resolve(userInCache);\r\n            }\r\n            \r\n            this.findUserById(id, (err, user) => {\r\n                if(!err && user){\r\n                    this.users = this.users.set(id, user);\r\n                }\r\n                return err ? reject(err) : resolve(user);\r\n            })\r\n        })\r\n    }\r\n\r\n    findUserById(id, callback = () => {}){\r\n        if(!id){\r\n            return callback({message: \"User Not Found!\"}, null);\r\n        }\r\n        const userId = new ObjectId(id)\r\n        this.app.db.collection('users').findOne({_id: userId}, (err, result) => {\r\n            if(err || !result){\r\n                return callback({message: \"User Not Found!\"});\r\n            }\r\n            return callback(null, result);\r\n        })\r\n    }\r\n\r\n    beforeSave(user, callback = () => {}){\r\n        // Validation of user before saving\r\n\r\n        let errors = [];\r\n\r\n        const fields = ['name', 'email', 'password'];\r\n        const validations = {\r\n            name: {\r\n                errorMessage: 'Name is required.',\r\n                do: () => {\r\n                    const name = _.get(user, 'name', '');\r\n                    return name.length;\r\n                }\r\n            },\r\n            email: {\r\n                errorMessage: 'Check your Email ID & Try Again',\r\n                do: () => {\r\n                    const email = _.get(user, 'email', '');\r\n                    if(!email.length || !isEmail(email)){\r\n                        return false;\r\n                    }\r\n\r\n                    return true;\r\n                }\r\n            },\r\n            password: {\r\n                errorMessage: 'Password is required & should be more than 4 characters.',\r\n                do: () => {\r\n                    const password = _.get(user, 'password', '');\r\n                    if(!password.length || password.length < 4){\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                }\r\n            },\r\n        }\r\n        fields.forEach((field) => {\r\n            const fieldValidation = _.get(validations, field);\r\n\r\n            if(fieldValidation){\r\n                const isValid = fieldValidation.do();\r\n                const errMsg = fieldValidation.errorMessage;\r\n\r\n                if(!isValid){\r\n                    errors.push(errMsg)\r\n                }\r\n            }\r\n        });\r\n\r\n        if(errors.length){\r\n            const err = _.join(errors, ', ')\r\n            return callback(err, null);\r\n        }\r\n\r\n        const email = _.toLower(_.trim(_.get(user, 'email', '')));\r\n        this.app.db.collection('users').findOne({email: email}, (err, result) => {\r\n            if(err || result){\r\n               return callback({message: \"Email already exists!\"}, null);\r\n            }\r\n\r\n        // Successfully Checked\r\n        const password = _.get(user, 'password');\r\n        const hashPassword = bcrypt.hashSync(password, saltRounds);\r\n\r\n        const userFormatted = {\r\n            name: `${_.trim(_.get(user, 'name'))}`,\r\n            email: email,\r\n            password: hashPassword,\r\n            created: new Date(),\r\n        };\r\n\r\n        return callback(null, userFormatted);\r\n    \r\n    });\r\n\r\n    }\r\n    create(user){\r\n        const db = this.app.db;\r\n        return new Promise((resolve, reject) => {\r\n            this.beforeSave(user, (err, user) => {\r\n                if(err){\r\n                    return reject(err);\r\n                }\r\n\r\n                // Add user to db\r\n                db.collection('users').insertOne(user, (err, info) => {\r\n                    if(err){\r\n                        return reject({message: \"An error saving user.\"});\r\n                    }\r\n                    \r\n                    const userId = _.get(user, '_id').toString();\r\n\r\n                    this.users = this.users.set(userId, user);\r\n                    return resolve(user);\r\n                })\r\n            })\r\n        });\r\n    }\r\n}\r\n\r\nexport default User;"]}