{"version":3,"sources":["../src/AppRouter.js"],"names":["START_TIME","Date","AppRouter","app","setupRouter","bind","post","req","res","next","body","models","user","create","then","_","unset","status","json","catch","err","error","get","tokenId","token","loadUserByTokenId","keyword","search","results","userId","load","login","logout","message","channelId","channel","members","query","_id","$in","options","name","created","find","users","filter","JSON","parse","toString","limit","offset","c","memberIds","each","id","push","includes","getChannelMessages","messages","$lookup","from","localField","foreignField","as","$match","$all","$project","title","lastMessage","updated","online","$sort","$limit","aggregate","channels"],"mappings":"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","file":"AppRouter.js","sourcesContent":["import moment from 'moment'\r\nimport _, { toUpper } from 'lodash';\r\n\r\nexport const START_TIME = new Date();\r\n\r\nclass AppRouter{\r\n    constructor(app){\r\n        this.app = app;\r\n        this.setupRouter = this.setupRouter.bind(this);\r\n        this.setupRouter();\r\n    }\r\n\r\n    setupRouter(){\r\n        const app = this.app;\r\n        \r\n        // /*\r\n        // - @endpoint: /\r\n        // - @method: GET\r\n        // */\r\n\r\n        // app.get('/', (req, res, next) => {\r\n        //     return res.json({ \r\n        //         started: moment(START_TIME).fromNow(),\r\n        //     });\r\n        // });\r\n\r\n        /*\r\n        - @endpoint: /api/users\r\n        - @method: POST\r\n        */\r\n\r\n        app.post('/api/users', (req, res, next) => {\r\n            const body = req.body;\r\n            app.models.user.create(body).then((user) => {\r\n                _.unset(user, 'password');\r\n                return res.status(200).json(user);\r\n            }).catch((err) => {\r\n                return res.status(503).json({error: err})\r\n            });\r\n            \r\n        });\r\n\r\n         /*\r\n        - @endpoint: /api/users/me\r\n        - @method: GET\r\n        */\r\n\r\n        app.get('/api/users/me', (req, res, next) => {\r\n            let tokenId = req.get('authorization');\r\n            if(!tokenId){\r\n                // Get token from query\r\n                tokenId = _.get(req, 'query.auth');\r\n            }\r\n            \r\n            app.models.token.loadUserByTokenId(tokenId).then((token) => {\r\n                _.unset(token, \"user.password\");\r\n                return res.json(token);\r\n            }).catch(err => {\r\n                return res.status(401).json({\r\n                    error: err\r\n                });\r\n            });\r\n        });\r\n\r\n        /*\r\n        - @endpoint: /api/users/me\r\n        - @method: GET\r\n        */\r\n\r\n        app.post('/api/users/search', (req, res, next) => {\r\n            const keyword = _.get(req, 'body.search', '')\r\n            app.models.user.search(keyword).then((results) => {\r\n                return res.status(200).json(results);\r\n            }).catch((err) => {\r\n                return res.status(404).json({\r\n                    error: 'User Not Found!'\r\n                });\r\n            });\r\n        });\r\n\r\n        /*\r\n        - @endpoint: /api/users/:id\r\n        - @method: GET\r\n        */\r\n\r\n        app.get('/api/users/:id', (req, res, next) => {\r\n            const userId = _.get(req, 'params.id');\r\n            app.models.user.load(userId).then((user) => {\r\n                _.unset(user, 'password');\r\n                return res.status(200).json(user);\r\n            }).catch(err => {\r\n                return res.status(404).json({\r\n                    error: err,\r\n                });\r\n            });\r\n        });\r\n\r\n        /*\r\n        - @endpoint: /api/users/login\r\n        - @method: POST\r\n        */\r\n\r\n        app.post('/api/users/login', (req, res, next) => {\r\n            const body = _.get(req, 'body');\r\n            app.models.user.login(body).then((token) => {\r\n                _.unset(token, 'user.password');\r\n                return res.status(200).json(token);\r\n            }).catch(err => {\r\n                return res.status(401).json({\r\n                    error: err,\r\n                });\r\n            });\r\n        });\r\n\r\n        /*\r\n        - @endpoint: /api/me/logout\r\n        - @method: GET\r\n        */\r\n\r\n        app.get('/api/me/logout', (req, res, next) => {\r\n            let tokenId = req.get('authorization');\r\n            if(!tokenId){\r\n                // Get token from query\r\n                tokenId = _.get(req, 'query.auth');\r\n            }\r\n            \r\n            app.models.token.loadUserByTokenId(tokenId).then((token) => {\r\n                app.models.token.logout(token);\r\n\r\n                return res.status(200).json({\r\n                    message: 'Logged Out Successfully!'\r\n                })\r\n            }).catch((err) => {\r\n                return res.status(401).json({error: {message: 'Access Denied!'}});\r\n            });\r\n        })\r\n\r\n        /*\r\n        - @endpoint: /api/channels/:id\r\n        - @method: GET\r\n        */\r\n\r\n        app.get('/api/channels/:id', (req, res, next) => {\r\n            const channelId = _.get(req, 'params.id');\r\n            if(!channelId){\r\n                return res.status(404).json({error: {message: \"Channel Not Found!\"}});\r\n            }\r\n\r\n            app.models.channel.load(channelId).then((channel) => {\r\n                // Fetch all users from membersIds\r\n                const members = channel.members;\r\n                const query = {\r\n                    _id: {$in: members},\r\n                }\r\n                const options = {\r\n                    _id: 1,\r\n                    name: 1,\r\n                    created: 1,\r\n                }\r\n                app.models.user.find(query, options).then((users) => {\r\n                    channel.users = users;\r\n                    return res.status(200).json(channel);\r\n                }).catch((err) => {\r\n                    return res.status(404).json({error: {message: \"Channel Not Found!\"}});\r\n                });\r\n                \r\n            }).catch((err) => {\r\n                return res.status(404).json({error: {message: \"Channel Not Found!\"}});\r\n            });\r\n        });\r\n\r\n        /*\r\n        - @endpoint: /api/me/channels/:id/messages\r\n        - @method: GET\r\n        */\r\n\r\n       app.get('/api/channels/:id/messages', (req, res, next) => {\r\n        let tokenId = req.get('authorization');\r\n\r\n        if (!tokenId) {\r\n            tokenId = _.get(req, 'query.auth');\r\n        }\r\n\r\n        app.models.token.loadUserByTokenId(tokenId).then((token) => {\r\n            const userId = token.userId;\r\n\r\n            // Ensure user is logged in & in channel members\r\n            let filter = _.get(req, 'query.filter', null);\r\n            if (filter) {\r\n                filter = JSON.parse(filter);\r\n            }\r\n\r\n            const channelId = _.toString(_.get(req, 'params.id'));\r\n            const limit = _.get(filter, 'limit', 50);\r\n            const offset = _.get(filter, 'offset', 0);\r\n\r\n            // Load channel\r\n            this.app.models.channel.load(channelId).then((c) => {\r\n                const memberIds = _.get(c, 'members');\r\n                const members = [];\r\n\r\n                _.each(memberIds, (id) => {\r\n                    members.push(_.toString(id));\r\n                })\r\n\r\n                if (!_.includes(members, _.toString(userId))) {\r\n                    return res.status(401).json({error: {message: \"Access denied\"}});\r\n                }\r\n\r\n                this.app.models.message.getChannelMessages(channelId, limit, offset).then((messages) => {\r\n                    return res.status(200).json(messages);\r\n                }).catch((err) => {\r\n                    return res.status(404).json({error: {message: \"Not found.\"}});\r\n                })\r\n            }).catch((err) => {\r\n                return res.status(404).json({error: {message: \"Not found.\"}});\r\n            })\r\n        }).catch((err) => {\r\n            return res.status(401).json({error: {message: \"Access denied\"}});\r\n        });\r\n    });\r\n            \r\n            \r\n\r\n        /*\r\n        - @endpoint: /api/me/channels\r\n        - @method: GET\r\n        */\r\n\r\n        app.get('/api/me/channels', (req, res, next) => {\r\n            let tokenId = req.get('authorization');\r\n            if(!tokenId){\r\n                // Get token from query\r\n                tokenId = _.get(req, 'query.auth');\r\n            }\r\n            \r\n            app.models.token.loadUserByTokenId(tokenId).then((token) => {\r\n                _.unset(token, \"user.password\");\r\n                const userId = token.userId;\r\n\r\n                const query = [\r\n                    {\r\n                        $lookup: {\r\n                            from: 'users',\r\n                            localField: 'members',\r\n                            foreignField: '_id',\r\n                            as: 'users',\r\n                        }\r\n                    },\r\n                    {\r\n                        $match: {\r\n                            members: {$all: [userId]}\r\n                        }\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: true,\r\n                            title: true,\r\n                            lastMessage: true,\r\n                            created: true,\r\n                            updated: true,\r\n                            userId: true,\r\n                            members: true,\r\n                            users: {\r\n                                _id: true,\r\n                                name: true,\r\n                                created: true,\r\n                                online: true,\r\n                            },\r\n                        }\r\n                    },\r\n                    {\r\n                        $sort: {\r\n                            updated: -1,\r\n                            created: -1,\r\n                        },\r\n                    },\r\n                    {\r\n                        $limit: 50,\r\n                    },\r\n                ];\r\n\r\n                app.models.channel.aggregate(query).then((channels) => {\r\n                    return res.status(200).json(channels);\r\n                }).catch((err) => {\r\n                    return res.status(404).json({error: {message: \"Not Found!\"}});\r\n                })\r\n            }).catch(err => {\r\n                return res.status(401).json({\r\n                    error: \"Access Denied!\",\r\n                });\r\n            });\r\n        })\r\n\r\n    }\r\n}\r\nexport default AppRouter;"]}